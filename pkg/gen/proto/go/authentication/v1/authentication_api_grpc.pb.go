// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authenticationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticationAPIServiceClient is the client API for AuthenticationAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationAPIServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
}

type authenticationAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationAPIServiceClient(cc grpc.ClientConnInterface) AuthenticationAPIServiceClient {
	return &authenticationAPIServiceClient{cc}
}

func (c *authenticationAPIServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/authentication.v1.AuthenticationAPIService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationAPIServiceServer is the server API for AuthenticationAPIService service.
// All implementations should embed UnimplementedAuthenticationAPIServiceServer
// for forward compatibility
type AuthenticationAPIServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
}

// UnimplementedAuthenticationAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthenticationAPIServiceServer struct {
}

func (UnimplementedAuthenticationAPIServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}

// UnsafeAuthenticationAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationAPIServiceServer will
// result in compilation errors.
type UnsafeAuthenticationAPIServiceServer interface {
	mustEmbedUnimplementedAuthenticationAPIServiceServer()
}

func RegisterAuthenticationAPIServiceServer(s grpc.ServiceRegistrar, srv AuthenticationAPIServiceServer) {
	s.RegisterService(&AuthenticationAPIService_ServiceDesc, srv)
}

func _AuthenticationAPIService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationAPIServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authentication.v1.AuthenticationAPIService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationAPIServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationAPIService_ServiceDesc is the grpc.ServiceDesc for AuthenticationAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.v1.AuthenticationAPIService",
	HandlerType: (*AuthenticationAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AuthenticationAPIService_CreateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication/v1/authentication_api.proto",
}
